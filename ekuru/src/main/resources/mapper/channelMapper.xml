<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.scit.ekuru.dao.ChannelMapper">

<select id="getListAll" resultType="channel">
	SELECT
		CHNUM,
		CHID,
		CHNAME,
		CHPROFILE,
		CHFOLLOWER,
		CHINTRO,
		CHINDATE
	FROM
		E_CHANNEL_TB
</select>

<!-- 채널 정보 -->
<select id="chRead" parameterType="channel" resultType="channel">
	SELECT
		CHNUM,
		CHID,
		CHNAME,
		CHPROFILE,
		CHFOLLOWER,
		CHINTRO,
		CHINDATE
	FROM
		E_CHANNEL_TB
	WHERE
	    chId = #{chId}

</select>

<!-- 상품 전체 리스트 -->
<select id="getProdList" parameterType="channel" resultType="product">
	SELECT
		PRODNUM,
		USERID,
		CHNUM,
		PRODCATEGORY,
		PRODTITLE,
		PRODSTOCK,
		PRODPRICE,
		PRODCONTENT,
		PRODORIGINALPIC1,
		PRODORIGINALPIC2,
		PRODORIGINALPIC3,
		PRODINDATE
	FROM
		E_PRODUCT_TB
	where
	    USERID = #{chId}
</select>

<!-- 각 물품 가져오기 -->
<select id="getProdEach" parameterType="product" resultType="product">
	SELECT
		PRODNUM,
		USERID,
		CHNUM,
		PRODCATEGORY,
		PRODTITLE,
		PRODSTOCK,
		PRODPRICE,
		PRODCONTENT,
		PRODORIGINALPIC1,
		PRODORIGINALPIC2,
		PRODORIGINALPIC3,
		PRODINDATE
	FROM
		E_PRODUCT_TB
	where
	    PRODNUM = #{prodNum}

</select>

<!-- 상품 등록 -->
<insert id="ch_posters_Write" parameterType="product">
INSERT INTO
	E_PRODUCT_TB (
		PRODNUM,
		USERID,
		CHNUM,
		PRODCATEGORY,
		PRODTITLE,
		PRODSTOCK,
		PRODPRICE,
		PRODCONTENT,
		PRODORIGINALPIC1,
		PRODORIGINALPIC2,
		PRODORIGINALPIC3,
		PRODINDATE
	)VALUES(
		PRODNUM_SQ.nextval,
		#{userId},
		#{chNum},
		#{prodCategory},
		#{prodTitle},
		#{prodStock},
		#{prodPrice},
		#{prodContent},
		#{prodOriginalPic1},
		#{prodOriginalPic2},
		#{prodOriginalPic3},
		SYSDATE)
</insert>

<!-- 상품 삭제 -->
<delete id="prodDelete" parameterType="int">
	DELETE
		FROM
			E_PRODUCT_TB
		WHERE
			PRODNUM = #{prodNum}
</delete>

<!-- 상품 댓글 가져오기 -->
<select id="getProdComment" parameterType="int" resultType="prodComment">
	SELECT
		PRODCOMMENTNUM,
		USERID,
		PRODNUM,
		PRODCOMMENT
	FROM
		E_PRODUCTCOMMENT_TB
	WHERE
		PRODNUM = #{prodNum}

</select>

<!-- 상품 댓글 추가 -->
<insert id="addComment" parameterType="prodComment">

	<selectKey keyProperty="prodCommentNum" resultType="int" order="BEFORE">
		SELECT
			prodCommentNum_seq.nextval
		FROM
			dual
	</selectKey>
	INSERT INTO
		E_PRODUCTCOMMENT_TB(
			PRODCOMMENTNUM,
			USERID,
			PRODNUM,
			PRODCOMMENT
		)VALUES(
			#{prodCommentNum},
			#{userId},
			#{prodNum},
			#{prodComment})

</insert>

<!-- 상품 댓글 삭제 -->
<delete id="deleteComment" parameterType="int">
	DELETE FROM
		E_PRODUCTCOMMENT_TB
	WHERE
		PRODCOMMENTNUM= #{prodCommentNum}

</delete>

<!-- 카테고리 별 채널 리스트 -->
<select id="chCategoryResult" parameterType="int" resultType="channel">
	SELECT
		CHNUM,
		CHID,
		CHNAME,
		CHPROFILE,
		CHFOLLOWER,
		CHINTRO,
		CHINDATE
	FROM
		E_CHANNEL_TB
	WHERE
		CHID in (SELECT DISTINCT
					USERID
				FROM
					E_PRODUCT_TB
				WHERE
					PRODCATEGORY = #{categoryCode})
</select>

<!-- 검색 결과 -->
<select id="chSearch" parameterType="String" resultType="channel">
	SELECT
		CHNUM,
		CHID,
		CHNAME,
		CHPROFILE,
		CHFOLLOWER,
		CHINTRO,
		CHINDATE
	FROM
		E_CHANNEL_TB
	WHERE
		CHID IN (SELECT DISTINCT
					USERID
				FROM
					E_PRODUCT_TB
				WHERE
					PRODTITLE like '%'|| #{search} || '%'
					or
					PRODCONTENT like '%'|| #{search} || '%')

</select>

<!-- 카테고리 정보 -->
<select id="getCategory" parameterType="product" resultType="category">
	SELECT
		ca.CATEGORYCODE as CATEGORYCODE,
		ca.CATEGORYNAME as CATEGORYNAME
	FROM
		E_CATEGORY_TB ca, E_PRODUCT_TB pr
	WHERE
		pr.PRODNUM = #{prodNum}
	AND
		ca.CATEGORYCODE = pr.PRODCATEGORY
</select>

<!-- 상품 정보 수정 -->
<update id="contentModify" parameterType="product">
	UPDATE
		E_PRODUCT_TB
	SET
		PRODCATEGORY = #{prodCategory},
		PRODTITLE = #{prodTitle},
		PRODSTOCK = #{prodStock},
		PRODPRICE = #{prodPrice},
		PRODCONTENT = #{prodContent},
		PRODINDATE = SYSDATE
	WHERE
		PRODNUM = #{prodNum}
</update>

<!-- 채널 정보 수정 -->
<update id="chModify" parameterType="channel">
	UPDATE
		E_CHANNEL_TB
	SET
		CHNAME = #{chName},
		<!-- CHPROFILE = #{chProfile}, -->
		CHINTRO =#{chIntro},
		CHPROFILE = #{chProfile},
		CHINDATE = SYSDATE
	WHERE
		CHID = #{chId}

</update>


<!-- AD 관련 출력 -->
<select id="selectChAd" resultType="hashmap">
select
		c.chId as USERID
		,c.CHNUM as CHNUM
        ,c.chname as chName
        ,c.chProfile as chProfile
from
	e_channel_tb c join e_product_tb p on c.chNum = p.chNum
	join e_ad_tb a on p.prodNum = a.prodNum
</select>

<!-- 메인에서 불러오는 상품 -->
<select id="selectProdAll" parameterType="string" resultType="product">
select
	prodNum,
	prodTitle,
	prodContent,
	prodOriginalPic1,
	prodIndate
from
	e_product_tb
<if test="_parameter != null">
where
	prodContent like '%'|| #{search} || '%'
or
	prodTitle like '%'|| #{search} || '%'
</if>
order by prodNum desc
</select>

<!-- 채널 생성 -->
<insert id="chCreate" parameterType="String">
	INSERT INTO
			E_CHANNEL_TB(
			CHNUM,
			CHID
		)VALUES(
			channel_seq.nextval,
			#{id})
</insert>

<!-- 채널 유무 확인 -->
<select id="chVerify" parameterType="String" resultType="String">

	SELECT DISTINCT
		ch.CHID
	FROM
		E_CHANNEL_TB ch, E_USER_TB u
	WHERE
		ch.CHID = #{chId}

</select>

<!-- 채널 팔로우 -->
<insert id="chFollow" parameterType="following">
	INSERT INTO
		E_FOLLOWING_TB
				(FOLLOWINGNUM,
				USERID,
				CHNUM
			)VALUES(
				following_seq.nextval,
				#{userId},
				#{chNum})
</insert>

<!-- 채널 팔로우 숫자 증가 -->
<update id="chFollowUpdate" parameterType="following">
	UPDATE
		E_CHANNEL_TB
	SET
		CHFOLLOWER = CHFOLLOWER + 1
	WHERE
		CHNUM=#{chNum}
</update>

<!-- 팔로잉 여부 -->
<select id="fCheck" parameterType="String" resultType="user">
	SELECT
		USERID
	FROM
		E_FOLLOWING_TB
	WHERE
		CHNUM = (SELECT
					CHNUM
				FROM
					E_CHANNEL_TB
				WHERE
					CHID = #{userId})
</select>


<select id="channelFollowing" parameterType="String" resultType="channel">
	SELECT
		ch.CHID,
		ch.CHNAME,
		ch.CHINTRO
	FROM
		E_CHANNEL_TB ch, E_FOLLOWING_TB fo
	WHERE
		fo.USERID = #{userId}
	AND
	ch.CHNUM = fo.CHNUM

</select>

<!-- 팔로잉 리스트 삭제 -->
<delete id="deleteFollowingList" parameterType="String">
	DELETE FROM
			E_FOLLOWING_TB
	WHERE
		USERID = #{userId}

</delete>
</mapper>
